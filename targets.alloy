declare "trace_pipeline" {
    argument "pipeline_target" {
        optional = false
    }
    argument "prometheus_target" {
        optional = false
    }

    // The OpenTelemetry batch processor collects trace spans until a batch size or timeout is met, before sending those
    // spans onto another target. This processor is labeled 'default'.
    otelcol.processor.batch "batcher" {
        // Wait until we've received 16K of data.
        send_batch_size = 16384
        send_batch_max_size = 16384
        // Or until 2 seconds have elapsed.
        timeout = "2s"
        // When the Alloy has enough batched data, send it to the OpenTelemetry exporter named 'tempo'.
        output {
            traces = argument.pipeline_target.value
        }
    }


    // The Spanmetrics Connector will generate RED metrics based on the incoming trace span data.
    otelcol.connector.spanmetrics "tracemetrics" {
        // The namespace explicit adds a prefix to all the generated span metrics names.
        // In this case, we'll ensure they match as closely as possible those generated by Tempo.
        namespace = "traces.spanmetrics"

        // Each extra dimension (metrics label) to be added to the generated metrics from matching span attributes. These
        // need to be defined with a name and optionally a default value (in the following cases, we do not want a default
        // value if the span attribute is not present).
        dimension {
            name = "http.method"
        }
        dimension {
            name = "http.target"
        }
        dimension {
            name = "http.status_code"
        }
        dimension {
            name = "service.version"
        }

        // A histogram block must be present, either explicitly defining bucket values or via an exponential block.
        // We do the latter here.
        histogram {
            explicit {
            }
        }

        // The exemplar block is added to ensure we generate exemplars for traces on relevant metric values.
        exemplars {
            enabled = true
        }

        // Generated metrics data is in OTLP format. We send this data to the OpenTelemetry Prometheus exporter to ensure
        // it gets transformed into Prometheus format data.
        output {
            metrics = argument.prometheus_target.value
        }
    }

    export "stages" {
        value = [otelcol.processor.batch.batcher.input, otelcol.connector.spanmetrics.tracemetrics.input]
        //value = [otelcol.processor.batch.batcher.input]
    }
}
